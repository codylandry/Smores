{
    "docs": [
        {
            "location": "/", 
            "text": "Smores\n\n\n\n\n\n\nSmores allows you to specify a schema for user facing template features.  It leverages marshmallow (hence 'smores') to\npopulate and transform data that is then rendered via jinja.  It has a parser that presents a more friendly syntax to \nusers (ex. {user.addresses:1.street}).  It also includes an autocomplete method that gives you intellisense style \noptions given a tag fragment.  \n\n\nSmores provides two Marshmallow field types called TemplateString and TemplateFile.  Templates defined in these fields\nare scoped to that schema and it's descendants.  Each schema can have a _default_template that, if defined, will what\nis inserted if the associated tag ends with that schema.  For example: typing {user.address} will render the _default_template\nfor the Address schema.  You can define other template attributes as well.  For example, see the 'google_link' attribute\nof the Address schema below.  Typing {user.address.google_link} will populate and insert that link.  \n\n\nsmores.tag_autocomplete is a method where you can provide a tag 'fragment' and it will return the possible options below that.\nFor example:\n\n\nfor the schemas below\n\nsmores.tag_autocomplete(\"\") returns ['user', 'address', 'coordinates']\nsmores.tag_autocomplete(\"user\") returns ['id', 'name', 'email', 'address', '_default_template']\nsmores.tag_autocomplete(\"user.address.geo\") returns ['lat', 'lng', '_default_template']\n\nReceiving '_default_template' or no results means that the current tag fragment is valid but _default_template\nshouldn't be appended to the tag in the ui.\n\n\n\nfrom smores import Smores\nfrom marshmallow import Schema, fields\n\n# instantiate a smores instance\nsmores = Smores()\n\n# smores.schema registers the schema with the instance\n@smores.schema\nclass Coordinates(Schema):\n    lat = fields.Decimal()\n    lng = fields.Decimal()\n    _default_template = smores.TemplateString(\n{{lat}},{{lng}}\n)\n\n@smores.schema\nclass Address(Schema):\n    street = fields.String()\n    suite = fields.String()\n    city = fields.String()\n    state = fields.String()\n    zipcode = fields.String()\n    coordinates = fields.Nested(Coordinates)\n    google_link = smores.TemplateString('\na href=\nhttps://maps.google.com/?ll={{coordinates}}\nView Map\n/a\n')\n    _default_template = smores.TemplateString(\n\n        \ndiv\n{{\na href=\nhttps://maps.google.com/?ll={{coordinates}}\nView Map\n/a\n}}\n/div\n\n        \ndiv\n{{street}} -- {{suite}}\n/div\n\n        \ndiv\n{{city}}, {{state}} {{zipcode}}\n/div\n\n    \n)\n\n@smores.schema\nclass User(Schema):\n    id = fields.Integer()\n    name = fields.String()\n    email = fields.Email()\n    address = fields.Nested(Address)\n    _default_template = smores.TemplateString(\n\n        \ndiv\n{{name}}\n/div\n\n        \ndiv\nE: {{email}}\n/div\n\n        \ndiv\n{{address}}\n/div\n\n    \n)\n\n\n# provide data to the render function\ndata = {\n    \nuser\n: {\n        \nid\n: 1,\n        \nname\n: \nLeanne Graham\n,\n        \nusername\n: \nBret\n,\n        \nemail\n: \nSincere@april.biz\n,\n        \nphone\n: \n1-770-736-8031 x56442\n,\n        \naddress\n: {\n            \nstreet\n: \nKulas Light\n,\n            \nsuite\n: \nApt. 556\n,\n            \ncity\n: \nGwenborough\n,\n            \nstate\n: \nMD\n,\n            \nzipcode\n: \n92998-3874\n,\n            \ncoordinates\n: {\n                \nlat\n: \n36.065934\n,\n                \nlng\n: \n-79.791414\n\n            }\n        },\n    }\n}\n\n# provide user created template\nuser_template = \n\n    \nh3\nHi, {user.name}!\n/h3\n\n    \np\nYour Info:\n/p\n\n    {user}\n\n\n\n# render the output\nprint smores.render(data, user_template)\n\n# output --\n\n# \nh3\nHi, Leanne Graham!\n/h3\n\n# \np\nYour Info:\n/p\n\n# \n# \ndiv\nLeanne Graham\n/div\n\n# \ndiv\nE: Sincere@april.biz\n/div\n\n# \ndiv\n\n#     \ndiv\na href=\nhttps://maps.google.com/?ll=36.065934,-79.791414\nView Map\n/a\n/div\n\n#     \ndiv\nKulas Light -- Apt. 556\n/div\n\n#     \ndiv\nGwenborough, MD 92998-3874\n/div\n\n# \n/div\n\n\n\n\n\n\nTODOS\n\n\n\n\n[ ] Publish on PyPI\n\n\n[ ] Make parser pluggable to support different tag syntax styles\n\n\n[ ] Add template analyzer to get list of required data\n\n\n[X] tag_autocomplete should have only and exclude\n\n\n[X] Add test that use model classes from an orm (probably use Pony and sqlite)\n\n\n[X] Add CircleCi integration for PR's\n\n\n[ ] Improve Documentation\n\n\n[ ] Add option to not use parser", 
            "title": "Home"
        }, 
        {
            "location": "/#smores", 
            "text": "Smores allows you to specify a schema for user facing template features.  It leverages marshmallow (hence 'smores') to\npopulate and transform data that is then rendered via jinja.  It has a parser that presents a more friendly syntax to \nusers (ex. {user.addresses:1.street}).  It also includes an autocomplete method that gives you intellisense style \noptions given a tag fragment.    Smores provides two Marshmallow field types called TemplateString and TemplateFile.  Templates defined in these fields\nare scoped to that schema and it's descendants.  Each schema can have a _default_template that, if defined, will what\nis inserted if the associated tag ends with that schema.  For example: typing {user.address} will render the _default_template\nfor the Address schema.  You can define other template attributes as well.  For example, see the 'google_link' attribute\nof the Address schema below.  Typing {user.address.google_link} will populate and insert that link.    smores.tag_autocomplete is a method where you can provide a tag 'fragment' and it will return the possible options below that.\nFor example:  for the schemas below\n\nsmores.tag_autocomplete(\"\") returns ['user', 'address', 'coordinates']\nsmores.tag_autocomplete(\"user\") returns ['id', 'name', 'email', 'address', '_default_template']\nsmores.tag_autocomplete(\"user.address.geo\") returns ['lat', 'lng', '_default_template']\n\nReceiving '_default_template' or no results means that the current tag fragment is valid but _default_template\nshouldn't be appended to the tag in the ui.  from smores import Smores\nfrom marshmallow import Schema, fields\n\n# instantiate a smores instance\nsmores = Smores()\n\n# smores.schema registers the schema with the instance\n@smores.schema\nclass Coordinates(Schema):\n    lat = fields.Decimal()\n    lng = fields.Decimal()\n    _default_template = smores.TemplateString( {{lat}},{{lng}} )\n\n@smores.schema\nclass Address(Schema):\n    street = fields.String()\n    suite = fields.String()\n    city = fields.String()\n    state = fields.String()\n    zipcode = fields.String()\n    coordinates = fields.Nested(Coordinates)\n    google_link = smores.TemplateString(' a href= https://maps.google.com/?ll={{coordinates}} View Map /a ')\n    _default_template = smores.TemplateString( \n         div {{ a href= https://maps.google.com/?ll={{coordinates}} View Map /a }} /div \n         div {{street}} -- {{suite}} /div \n         div {{city}}, {{state}} {{zipcode}} /div \n     )\n\n@smores.schema\nclass User(Schema):\n    id = fields.Integer()\n    name = fields.String()\n    email = fields.Email()\n    address = fields.Nested(Address)\n    _default_template = smores.TemplateString( \n         div {{name}} /div \n         div E: {{email}} /div \n         div {{address}} /div \n     )\n\n\n# provide data to the render function\ndata = {\n     user : {\n         id : 1,\n         name :  Leanne Graham ,\n         username :  Bret ,\n         email :  Sincere@april.biz ,\n         phone :  1-770-736-8031 x56442 ,\n         address : {\n             street :  Kulas Light ,\n             suite :  Apt. 556 ,\n             city :  Gwenborough ,\n             state :  MD ,\n             zipcode :  92998-3874 ,\n             coordinates : {\n                 lat :  36.065934 ,\n                 lng :  -79.791414 \n            }\n        },\n    }\n}\n\n# provide user created template\nuser_template =  \n     h3 Hi, {user.name}! /h3 \n     p Your Info: /p \n    {user} \n\n# render the output\nprint smores.render(data, user_template)\n\n# output -- \n#  h3 Hi, Leanne Graham! /h3 \n#  p Your Info: /p \n# \n#  div Leanne Graham /div \n#  div E: Sincere@april.biz /div \n#  div \n#      div a href= https://maps.google.com/?ll=36.065934,-79.791414 View Map /a /div \n#      div Kulas Light -- Apt. 556 /div \n#      div Gwenborough, MD 92998-3874 /div \n#  /div", 
            "title": "Smores"
        }, 
        {
            "location": "/#todos", 
            "text": "[ ] Publish on PyPI  [ ] Make parser pluggable to support different tag syntax styles  [ ] Add template analyzer to get list of required data  [X] tag_autocomplete should have only and exclude  [X] Add test that use model classes from an orm (probably use Pony and sqlite)  [X] Add CircleCi integration for PR's  [ ] Improve Documentation  [ ] Add option to not use parser", 
            "title": "TODOS"
        }, 
        {
            "location": "/api/smores/", 
            "text": "Smores\n\n\n\nSmores(self, default_template_name='_default_template')\n\n\n\n\nProvides a method of defining a schema for string templates.  Presents a tag syntax\neasy enough for end users to use.\n\n\n:param string default_template_name: The name you'd like to use for default schema templates\n\n\nrender\n\n\n\nSmores.render(self, data, template_string, sub_templates=None, fallback_value='', pre_process=None)\n\n\n\n\nRecursively populates the 'template_string' with data gathered from dumping 'data' through the Marshmallow 'schema'.\nVariables are evaluated and will return the '_default_template' if one exists.  Prettifies end result.\n\n\n:param data: data to be dumped via the 'schema'\n             (likely an ORM model instance) accepts both objects and dicts/lists\n:param template_string: text generated by end-users\n:param sub_templates: list of sub_templates [(\n: \n)]\n:param fallback_value: either string or function returning a\n                       string to serve as default value for tag attrs that cannot be resolved\n:param pre_process: function that modifies the parsed version of the template\n:return: rendered template\n\n\nremove_schemas\n\n\n\nSmores.remove_schemas(self, schemas)\n\n\n\n\nUnregisters schema(s)\n\n\n:param schemas: schema|list of schemas\n\n\nautocomplete\n\n\n\nSmores.autocomplete(self, fragment, only=None, exclude=None)\n\n\n\n\nGets the available options for a given tag fragment\n\n\n:param string fragment: a tag fragment ex: user.addresses\n:param list only: a list of schemas that should be included\n:param list exclude: a list of schemas that should be excluded\n:return: TagAutocomplete result\n\n\ntemp_schemas\n\n\n\nSmores.temp_schemas(*args, **kwds)\n\n\n\n\nReturns a context manager that temporarily registers 'schemas'\nUseful for adding some schemas for a render call without polluting/conflicting\nwith existing schemas\n:param schemas:  single schema or list of schemas\n:return: RegisterTempSchemas instance\n\n\nschemas\n\n\n\n:return: list of registered schemas\n\n\nadd_schemas\n\n\n\nSmores.add_schemas(self, schemas)\n\n\n\n\nRegisters schema(s)\n\n\n:param schemas: schema|list of schemas\n\n\nadd_module_schemas\n\n\n\nSmores.add_module_schemas(self, module_)\n\n\n\n\nAdds all Schema classes found in module_\n\n\n:param module module_: Gets schema classes from this module\n\n\nschema\n\n\n\nSmores.schema(self, schema)\n\n\n\n\nA decorator that registers a marshmallow schema\n\n\n:param Schema schema: schema class object\n:return: schema", 
            "title": "Smores"
        }, 
        {
            "location": "/api/templateString/", 
            "text": "TemplateString\n\n\n\nTemplateString(self, template_string, use_parser=False, *args, **kwargs)\n\n\n\n\nRenders template_string using jinja w/o parser\n\n\n:param string template_string: a jinja template\n:param Environment env: jinja environment\n:param bool use_parser: flag for whether to use the smores parser", 
            "title": "TemplateString"
        }, 
        {
            "location": "/api/templateFile/", 
            "text": "TemplateFile\n\n\n\nTemplateFile(self, template_path, use_parser=False, *args, **kwargs)", 
            "title": "TemplateFile"
        }, 
        {
            "location": "/api/utils/", 
            "text": "smores.utils\n\n\n\nget_module_schemas\n\n\n\nget_module_schemas(module_)\n\n\n\n\nGets all schemas from module_\n\nloop_table_rows\n\n\nloop_table_rows(iterable_tags, template_string)\n\n\n\n\nA template preprocessing function that enables a special way of\niterating over values in a list of objects.  It searches for table cells\nwith particular tags and wraps the table row (and subsequent rows if they also contain the tags) with\na jinja for loop using the iterator, iterable tuple from 'iterable_tags'\nExample:\n\n\niterable_tags = {\n    \"mydogs.*\": (\"mydogs\", \"user.dogs\")\n}\n\n\ninput = '''\n    \n\n        \n\n            \n{mydogs.name}\n\n        \n\n        \n\n            \n{mydogs.weight}\n\n        \n\n    \n\n'''\n\n\nbecomes:\n\n\n\n    {% for mydogs in user.dogs %}\n        \n\n            \n{mydogs.name}\n\n        \n\n        \n\n            \n{mydogs.weight}\n\n        \n\n    {% endfor %}\n\n\n\n\n:param iterable_tags: a dict {\n: tuple(iterator: string, iterable: string)}\n:param template_string: jinja template string\n:return: transformed template string", 
            "title": "Utils"
        }
    ]
}