{
    "docs": [
        {
            "location": "/", 
            "text": "Smores\n\n\n\n\n\n\nSmores allows you to specify a schema for user facing template features.  It leverages marshmallow (hence 'smores') to\npopulate and transform data that is then rendered via jinja.  It has a parser that presents a more friendly syntax to \nusers (ex. {user.addresses:1.street}).  It also includes an autocomplete method that gives you intellisense style \noptions given a tag fragment.  \n\n\nSmores provides two Marshmallow field types called TemplateString and TemplateFile.  Templates defined in these fields\nare scoped to that schema and it's descendants.  Each schema can have a _default_template that, if defined, will what\nis inserted if the associated tag ends with that schema.  For example: typing {user.address} will render the _default_template\nfor the Address schema.  You can define other template attributes as well.  For example, see the 'google_link' attribute\nof the Address schema below.  Typing {user.address.google_link} will populate and insert that link.  \n\n\nsmores.tag_autocomplete is a method where you can provide a tag 'fragment' and it will return the possible options below that.\nFor example:\n\n\nfrom smores import Smores, TemplateString\nfrom marshmallow import Schema, fields\n\n# instantiate a smores instance\nsmores = Smores()\n\n# smores.schema registers the schema with the instance\n@smores.schema\nclass Coordinates(Schema):\n    lat = fields.Decimal()\n    lng = fields.Decimal()\n    _default_template = TemplateString(\n{{lat}},{{lng}}\n)\n\n@smores.schema\nclass Address(Schema):\n    street = fields.String()\n    suite = fields.String()\n    city = fields.String()\n    state = fields.String()\n    zipcode = fields.String()\n    coordinates = fields.Nested(Coordinates)\n    google_link = TemplateString('\na href=\nhttps://maps.google.com/?ll={{coordinates}}\nView Map\n/a\n')\n    _default_template = TemplateString(\n\n        \ndiv\n{{\na href=\nhttps://maps.google.com/?ll={{coordinates}}\nView Map\n/a\n}}\n/div\n\n        \ndiv\n{{street}} -- {{suite}}\n/div\n\n        \ndiv\n{{city}}, {{state}} {{zipcode}}\n/div\n\n    \n)\n\n@smores.schema\nclass User(Schema):\n    id = fields.Integer()\n    name = fields.String()\n    email = fields.Email()\n    address = fields.Nested(Address)\n    _default_template = TemplateString(\n\n        \ndiv\n{{name}}\n/div\n\n        \ndiv\nE: {{email}}\n/div\n\n        \ndiv\n{{address}}\n/div\n\n    \n)\n\n\n\n\n    # for the schemas above, simply invoke the autocomplete method with a tag fragment\n\n    \n smores.autocomplete(\n)\n    AutocompleteResponse(tagStatus='INVALID', options=['address', 'coordinates', 'user'])\n\n    \n smores.autocomplete('user')\n    AutocompleteResponse(tagStatus='VALID', options=['_default_template', 'address', 'email', 'id', 'name'])\n\n    \n smores.autocomplete('us')\n    AutocompleteResponse(tagStatus='INVALID', options=['user'])\n\n    \n smores.autocomplete(\nuser.address.coordinates\n)\n    AutocompleteResponse(tagStatus='VALID', options=['_default_template', 'lat', 'lng'])\n\n    # Receiving '_default_template' or no results means that the current tag fragment is valid but _default_template\n    # shouldn't be appended to the tag in the ui.\n\n\n\n\n# provide data to the render function\ndata = {\n    \nuser\n: {\n        \nid\n: 1,\n        \nname\n: \nLeanne Graham\n,\n        \nusername\n: \nBret\n,\n        \nemail\n: \nSincere@april.biz\n,\n        \nphone\n: \n1-770-736-8031 x56442\n,\n        \naddress\n: {\n            \nstreet\n: \nKulas Light\n,\n            \nsuite\n: \nApt. 556\n,\n            \ncity\n: \nGwenborough\n,\n            \nstate\n: \nMD\n,\n            \nzipcode\n: \n92998-3874\n,\n            \ncoordinates\n: {\n                \nlat\n: \n36.065934\n,\n                \nlng\n: \n-79.791414\n\n            }\n        },\n    }\n}\n\n# provide user created template\nuser_template = \n\n    \nh3\nHi, {user.name}!\n/h3\n\n    \np\nYour Info:\n/p\n\n    {user}\n\n\n\n# render the output\nprint smores.render(data, user_template)\n\n# output --\n\n# \nh3\nHi, Leanne Graham!\n/h3\n\n# \np\nYour Info:\n/p\n\n# \n# \ndiv\nLeanne Graham\n/div\n\n# \ndiv\nE: Sincere@april.biz\n/div\n\n# \ndiv\n\n#     \ndiv\na href=\nhttps://maps.google.com/?ll=36.065934,-79.791414\nView Map\n/a\n/div\n\n#     \ndiv\nKulas Light -- Apt. 556\n/div\n\n#     \ndiv\nGwenborough, MD 92998-3874\n/div\n\n# \n/div", 
            "title": "Home"
        }, 
        {
            "location": "/#smores", 
            "text": "Smores allows you to specify a schema for user facing template features.  It leverages marshmallow (hence 'smores') to\npopulate and transform data that is then rendered via jinja.  It has a parser that presents a more friendly syntax to \nusers (ex. {user.addresses:1.street}).  It also includes an autocomplete method that gives you intellisense style \noptions given a tag fragment.    Smores provides two Marshmallow field types called TemplateString and TemplateFile.  Templates defined in these fields\nare scoped to that schema and it's descendants.  Each schema can have a _default_template that, if defined, will what\nis inserted if the associated tag ends with that schema.  For example: typing {user.address} will render the _default_template\nfor the Address schema.  You can define other template attributes as well.  For example, see the 'google_link' attribute\nof the Address schema below.  Typing {user.address.google_link} will populate and insert that link.    smores.tag_autocomplete is a method where you can provide a tag 'fragment' and it will return the possible options below that.\nFor example:  from smores import Smores, TemplateString\nfrom marshmallow import Schema, fields\n\n# instantiate a smores instance\nsmores = Smores()\n\n# smores.schema registers the schema with the instance\n@smores.schema\nclass Coordinates(Schema):\n    lat = fields.Decimal()\n    lng = fields.Decimal()\n    _default_template = TemplateString( {{lat}},{{lng}} )\n\n@smores.schema\nclass Address(Schema):\n    street = fields.String()\n    suite = fields.String()\n    city = fields.String()\n    state = fields.String()\n    zipcode = fields.String()\n    coordinates = fields.Nested(Coordinates)\n    google_link = TemplateString(' a href= https://maps.google.com/?ll={{coordinates}} View Map /a ')\n    _default_template = TemplateString( \n         div {{ a href= https://maps.google.com/?ll={{coordinates}} View Map /a }} /div \n         div {{street}} -- {{suite}} /div \n         div {{city}}, {{state}} {{zipcode}} /div \n     )\n\n@smores.schema\nclass User(Schema):\n    id = fields.Integer()\n    name = fields.String()\n    email = fields.Email()\n    address = fields.Nested(Address)\n    _default_template = TemplateString( \n         div {{name}} /div \n         div E: {{email}} /div \n         div {{address}} /div \n     )      # for the schemas above, simply invoke the autocomplete method with a tag fragment\n\n      smores.autocomplete( )\n    AutocompleteResponse(tagStatus='INVALID', options=['address', 'coordinates', 'user'])\n\n      smores.autocomplete('user')\n    AutocompleteResponse(tagStatus='VALID', options=['_default_template', 'address', 'email', 'id', 'name'])\n\n      smores.autocomplete('us')\n    AutocompleteResponse(tagStatus='INVALID', options=['user'])\n\n      smores.autocomplete( user.address.coordinates )\n    AutocompleteResponse(tagStatus='VALID', options=['_default_template', 'lat', 'lng'])\n\n    # Receiving '_default_template' or no results means that the current tag fragment is valid but _default_template\n    # shouldn't be appended to the tag in the ui.  # provide data to the render function\ndata = {\n     user : {\n         id : 1,\n         name :  Leanne Graham ,\n         username :  Bret ,\n         email :  Sincere@april.biz ,\n         phone :  1-770-736-8031 x56442 ,\n         address : {\n             street :  Kulas Light ,\n             suite :  Apt. 556 ,\n             city :  Gwenborough ,\n             state :  MD ,\n             zipcode :  92998-3874 ,\n             coordinates : {\n                 lat :  36.065934 ,\n                 lng :  -79.791414 \n            }\n        },\n    }\n}\n\n# provide user created template\nuser_template =  \n     h3 Hi, {user.name}! /h3 \n     p Your Info: /p \n    {user} \n\n# render the output\nprint smores.render(data, user_template)\n\n# output -- \n#  h3 Hi, Leanne Graham! /h3 \n#  p Your Info: /p \n# \n#  div Leanne Graham /div \n#  div E: Sincere@april.biz /div \n#  div \n#      div a href= https://maps.google.com/?ll=36.065934,-79.791414 View Map /a /div \n#      div Kulas Light -- Apt. 556 /div \n#      div Gwenborough, MD 92998-3874 /div \n#  /div", 
            "title": "Smores"
        }, 
        {
            "location": "/api/smores/", 
            "text": "smores.smores\n\n\n\nSmores\n\n\n\nSmores(self, default_template_name='_default_template')\n\n\n\n\nProvides a method of defining a schema for string templates.  Presents a tag syntax\neasy enough for end users to use.\n\n\nArguments:\n\n\ndefault_template_name (str): The name you'd like to use for default schema templates\n\n\n\nrender\n\n\n\nSmores.render(self, data, template_string, sub_templates=None, fallback_value='', pre_process=None)\n\n\n\n\nRecursively populates the 'template_string' with data gathered from dumping 'data' through the Marshmallow 'schema'.\nVariables are evaluated and will return the '_default_template' if one exists.  Prettifies end result.\n\n\nArguments\n\n\n\n\ndata (dict)\n: data to be dumped via the 'schema' (likely an ORM model instance) accepts both objects and dicts/lists\n\n\ntemplate_string (str)\n: text generated by end-users\n\n\nsub_templates (dict)\n: mapping of subtemplate tag to expanded sub template string\n\n\nfallback_value (str|function|None)\n: either string or function returning a string to serve as default value for tag attrs that cannot be resolved\n\n\npre_process (function)\n: function that modifies the parsed version of the template\n\n\n\n\nReturns:\n\n\nstring: rendered template\n\n\n\nremove_schemas\n\n\n\nSmores.remove_schemas(self, schemas)\n\n\n\n\nUnregisters schema(s)\n\n\nArguments:\n\n\nschemas (Schema|list): schemas to unregister\n\n\n\nautocomplete\n\n\n\nSmores.autocomplete(self, fragment, only=None, exclude=None)\n\n\n\n\nEvaluates a tag fragment, returns a named tuple with the status of the fragment\nas it is, and possible options that could be used to expand/add to the fragment.\n\n\nArguments:\n\n\nfragment (string): a tag fragment ex: user.addresses\nonly (list): a list of schemas that should be included\nexclude (list): a list of schemas that should be excluded\n\n\n\nReturns:\n\n\nAutocompleteResponse: NamedTuple with both the status of the current tag fragment as well as possible options\n\n\n\nExample:\n\n\n smores.autocomplete(\"\")\nAutocompleteResponse(tagStatus='INVALID', options=['address', 'coordinates', 'user'])\n\n\n smores.autocomplete('user')\nAutocompleteResponse(tagStatus='VALID', options=['_default_template', 'address', 'email', 'id', 'name'])\n\n\n smores.autocomplete('us')\nAutocompleteResponse(tagStatus='INVALID', options=['user'])\n\n\n smores.autocomplete(\"user.address.coordinates\")\nAutocompleteResponse(tagStatus='VALID', options=['_default_template', 'lat', 'lng'])\n\n\n\nschemas\n\n\n\nProperty that returns a list of registered schemas\n\n\nReturns:\n\n\nlist: Currently registered schemas\n\n\n\nadd_schemas\n\n\n\nSmores.add_schemas(self, schemas)\n\n\n\n\nRegisters schema(s)\n\n\nArguments:\n\n\nschemas (Schema|list): schemas to register\n\n\n\nwith_schemas\n\n\n\nSmores.with_schemas(*args, **kwds)\n\n\n\n\nContext manager that registers schemas temporarily\n\n\nArguments:\n\n\nschemas (list|Schema):  single schema or list of schemas\n\n\n\nExample:\n\n\nclass Event(Schema):\n    time = fields.DateTime()\n    description = fields.String()\n\nwith smores.with_schemas(Event):\n\n\n\nEvent schema available here\n\n\n    smores.render(someDate, someTemplate)\n\n\n\nEvent schema is removed on exit\n\n\nadd_module_schemas\n\n\n\nSmores.add_module_schemas(self, module_)\n\n\n\n\nAdds all Schema classes found in module_\n\n\nArguments:\n\n\nmodule_ (module): Registers schema classes from this module\n\n\n\nschema\n\n\n\nSmores.schema(self, schema)\n\n\n\n\nA class decorator that registers a marshmallow schema\n\n\nExample:\n\n\nsmores = Smores()\n\n@smores.schema\nclass User(Schema):\n    name = fields.String()\n    email = fields.Email()", 
            "title": "Smores"
        }, 
        {
            "location": "/api/fields/", 
            "text": "TemplateString\n\n\n\nTemplateString(self, template_string, use_parser=False, *args, **kwargs)\n\n\n\n\nRenders template_string using jinja w/o parser\n\n\nArguments:\n\n\ntemplate_string (string): a jinja template\nenv (Environment): jinja environment\nuse_parser (bool): flag for whether to use the smores parser\n\n\n\nTemplateFile\n\n\n\nTemplateFile(self, template_path, use_parser=False, *args, **kwargs)\n\n\n\n\nReads file at template_path and renders template using jinja w/o parser\n\n\nArguments:\n\n\ntemplate_string (string): a jinja template\nenv (Environment): jinja environment\nuse_parser (bool): flag for whether to use the smores parser", 
            "title": "Fields"
        }, 
        {
            "location": "/api/utils/", 
            "text": "smores.utils\n\n\n\nget_module_schemas\n\n\n\nget_module_schemas(module_)\n\n\n\n\nReturns list of all classes found in the module_\n\n\nArguments:\n\n\nmodule_ (module): where to find schemas\n\n\n\nReturns:\n\n\nlist: schemas found in module_\n\n\n\nloop_table_rows\n\n\n\nloop_table_rows(iterable_tags, template_string)\n\n\n\n\nA template preprocessing function that enables a special way of\niterating over values in a list of objects.  It searches for table cells\nwith particular tags and wraps the table row (and subsequent rows if they also contain the tags) with\na jinja for loop using the iterator, iterable tuple from 'iterable_tags'\nExample:\n\n\nArguments:\n\n\niterable_tags (dict): mapping of\ntemplate_string (str): jinja template string\n\n\n\nReturns:\n\n\nstring: transformed template string\n\n\n\nExample:\n\n\niterable_tags = {\n    \nmydogs.*\n: (\nmydogs\n, \nuser.dogs\n)\n}\n\ninput = '''\n    \ntable\n\n        \ntr\n\n            \ntd\n{mydogs.name}\n/td\n\n        \n/tr\n\n        \ntr\n\n            \ntd\n{mydogs.weight}\n/td\n\n        \n/tr\n\n    \n/table\n\n'''\n\n\n smores.utils.loop_table_rows(input)\n\ntable\n\n    {% for mydogs in user.dogs %}\n        \ntr\n\n            \ntd\n{mydogs.name}\n/td\n\n        \n/tr\n\n        \ntr\n\n            \ntd\n{mydogs.weight}\n/td\n\n        \n/tr\n\n    {% endfor %}\n\n/table", 
            "title": "Utils"
        }
    ]
}